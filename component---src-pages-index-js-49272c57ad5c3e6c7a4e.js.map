{"version":3,"file":"component---src-pages-index-js-49272c57ad5c3e6c7a4e.js","mappings":"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","sources":["webpack://soluppg-ng-och-solnedg-ng/./node_modules/sunrise-sunset-js/dist/index.js","webpack://soluppg-ng-och-solnedg-ng/./src/images/sun.png","webpack://soluppg-ng-och-solnedg-ng/./src/functions/formatTime.js","webpack://soluppg-ng-och-solnedg-ng/./src/components/SunInfo.js","webpack://soluppg-ng-och-solnedg-ng/./src/functions/getMinutes.js","webpack://soluppg-ng-och-solnedg-ng/./src/pages/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\n/**\n * Sunrise/sunset script. By Matt Kane. Adopted for NPM use by Alexey Udivankin.\n *\n * Based loosely and indirectly on Kevin Boone's SunTimes Java implementation\n * of the US Naval Observatory's algorithm.\n *\n * Copyright Â© 2012 Triggertrap Ltd. All rights reserved.\n *\n * This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n * Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option)\n * any later version.\n *\n * This library is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more\n * details.\n * You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA,\n * or connect to: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html\n */\n/**\n * Default zenith\n */\nconst DEFAULT_ZENITH = 90.8333;\n/**\n * Degrees per hour\n */\nconst DEGREES_PER_HOUR = 360 / 24;\n/**\n * Msec in hour\n */\nconst MSEC_IN_HOUR = 60 * 60 * 1000;\n/**\n * Get day of year\n */\nfunction getDayOfYear(date) {\n  return Math.ceil((date.getTime() - new Date(date.getFullYear(), 0, 1).getTime()) / 8.64e7);\n}\n/**\n * Get sin of value in deg\n */\nfunction sinDeg(deg) {\n  return Math.sin(deg * 2.0 * Math.PI / 360.0);\n}\n/**\n * Get acos of value in deg\n */\nfunction acosDeg(x) {\n  return Math.acos(x) * 360.0 / (2 * Math.PI);\n}\n/**\n * Get asin of value in deg\n */\nfunction asinDeg(x) {\n  return Math.asin(x) * 360.0 / (2 * Math.PI);\n}\n/**\n * Get tan of value in deg\n */\nfunction tanDeg(deg) {\n  return Math.tan(deg * 2.0 * Math.PI / 360.0);\n}\n/**\n * Get cos of value in deg\n */\nfunction cosDeg(deg) {\n  return Math.cos(deg * 2.0 * Math.PI / 360.0);\n}\n/**\n * Get ramainder\n */\nfunction mod(a, b) {\n  const result = a % b;\n  return result < 0 ? result + b : result;\n}\n/**\n * Calculate Date for either sunrise or sunset\n */\nfunction calculate(latitude, longitude, isSunrise, zenith, date) {\n  const dayOfYear = getDayOfYear(date);\n  const hoursFromMeridian = longitude / DEGREES_PER_HOUR;\n  const approxTimeOfEventInDays = isSunrise ? dayOfYear + (6 - hoursFromMeridian) / 24 : dayOfYear + (18.0 - hoursFromMeridian) / 24;\n  const sunMeanAnomaly = 0.9856 * approxTimeOfEventInDays - 3.289;\n  const sunTrueLongitude = mod(sunMeanAnomaly + 1.916 * sinDeg(sunMeanAnomaly) + 0.020 * sinDeg(2 * sunMeanAnomaly) + 282.634, 360);\n  const ascension = 0.91764 * tanDeg(sunTrueLongitude);\n  let rightAscension;\n  rightAscension = 360 / (2 * Math.PI) * Math.atan(ascension);\n  rightAscension = mod(rightAscension, 360);\n  const lQuadrant = Math.floor(sunTrueLongitude / 90) * 90;\n  const raQuadrant = Math.floor(rightAscension / 90) * 90;\n  rightAscension = rightAscension + (lQuadrant - raQuadrant);\n  rightAscension /= DEGREES_PER_HOUR;\n  const sinDec = 0.39782 * sinDeg(sunTrueLongitude);\n  const cosDec = cosDeg(asinDeg(sinDec));\n  const cosLocalHourAngle = (cosDeg(zenith) - sinDec * sinDeg(latitude)) / (cosDec * cosDeg(latitude));\n  const localHourAngle = isSunrise ? 360 - acosDeg(cosLocalHourAngle) : acosDeg(cosLocalHourAngle);\n  const localHour = localHourAngle / DEGREES_PER_HOUR;\n  const localMeanTime = localHour + rightAscension - 0.06571 * approxTimeOfEventInDays - 6.622;\n  const time = mod(localMeanTime - longitude / DEGREES_PER_HOUR, 24);\n  const utcMidnight = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());\n  // Created date will be set to local (system) time zone.\n  return new Date(utcMidnight + time * MSEC_IN_HOUR);\n}\n/**\n * Calculate Sunrise time for given longitude, latitude, zenith and date\n */\nfunction getSunrise(latitude, longitude) {\n  let date = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Date();\n  return calculate(latitude, longitude, true, DEFAULT_ZENITH, date);\n}\n/**\n * Calculate Sunset time for given longitude, latitude, zenith and date\n */\nfunction getSunset(latitude, longitude) {\n  let date = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Date();\n  return calculate(latitude, longitude, false, DEFAULT_ZENITH, date);\n}\nexports.getSunrise = getSunrise;\nexports.getSunset = getSunset;","export default __webpack_public_path__ + \"static/sun-cd2b4f2d56910d57ecb989a6ebc2fc28.png\";","export default function formatTime(date) {\n  return Intl.DateTimeFormat(\"sv\", {\n\t\thour: \"numeric\",\n\t\tminute: \"numeric\",\n\t}).format(date);\n}","import * as React \t\t\t\t\t\t\t\tfrom \"react\";\nimport { getSunrise, getSunset } \tfrom 'sunrise-sunset-js';\nimport formatTime \t\t\t\t\t\t\t\tfrom \"../functions/formatTime\";\nimport getMinutes \t\t\t\t\t\t\t\tfrom \"../functions/getMinutes\";\n\nexport default function SunInfo(props) {\n\tconst todaysDate \t\t= new Date();\n\tconst todaysSunrise = getSunrise(props.lat, props.long, todaysDate);\n\tconst todaysSunset \t= getSunset(props.lat, props.long, todaysDate);\n\tconst todaysSunTime = todaysSunset.getTime() - todaysSunrise.getTime();\n\t\n\tconst yesterdaysDate = new Date();\n\tyesterdaysDate.setDate(yesterdaysDate.getDate() - 1); // subtract one day to get yesterdays date\n\tconst yesterdaysSunrise \t\t\t= getSunrise(props.lat, props.long, yesterdaysDate);\n\tconst yesterdaysSunset \t\t\t\t= getSunset(props.lat, props.long, yesterdaysDate);\n\tconst yesterdaysSunTime \t\t\t= yesterdaysSunset.getTime() - yesterdaysSunrise.getTime();\n\tconst sunTimeDiffToYesterday \t= yesterdaysSunTime - todaysSunTime;\n\t\n\tfunction diffToYesterday (timeDiffMilliseconds) {\n\t\tconst timeDiffMinutes = getMinutes(timeDiffMilliseconds);\n\t\t\n\t\tif (timeDiffMinutes > 0) {\n\t\t\treturn `${timeDiffMinutes} minuter lÃ¤ngre Ã¤n igÃ¥r`\n\t\t}\n\t\telse if (timeDiffMinutes < 0) {\n\t\t\treturn `${Math.abs(timeDiffMinutes)} minuter kortare Ã¤n igÃ¥r`\n\t\t}\n\t\telse {\n\t\t\treturn \"ungefÃ¤r samma som igÃ¥r\"\n\t\t}\n\t}\n\t\n\tfunction getHoursAndMinutes(milliseconds){\n\t\t\tvar minutes = \tmilliseconds / 1000 / 60;\n\t\t\tvar hours \t= \tMath.floor(minutes/60);\n\t\t\tminutes \t\t-= \thours*60;\n\t\t\tminutes \t\t= \tMath.round(minutes);\n\t\n\t\t\tif (hours !== 0 && minutes !== 0) {\n\t\t\t\treturn `${hours} timmar och ${minutes} minuter`;\t\n\t\t\t}\n\t\t\telse if (hours === 0 && minutes !== 0) {\n\t\t\t\treturn `${minutes} minuter`;\n\t\t\t}\n\t\t\telse if (hours !== 0 && minutes === 0) {\n\t\t\t\treturn `${hours} timmar`;\n\t\t\t}\n\t}\n\t\n\treturn (\n\t\t<>\n\t\t\t<h1>\n\t\t\t\tSolen i Stockholm gick idag upp <strong>{formatTime(todaysSunrise)}</strong> och ner <strong>{formatTime(todaysSunset)}</strong>.\n\t\t\t\t</h1>\n\t\t\t<h2>\n\t\t\t\tIdag var solen uppe i {getHoursAndMinutes(todaysSunTime)}, {diffToYesterday(sunTimeDiffToYesterday)}.\n\t\t\t</h2>\n\t\t</>\n\t)\n}","export default function getMinutes(milliseconds) {\n\tvar minutes = milliseconds / 1000 / 60;\n\t\n\treturn Math.round(minutes);\n}","import * as React from \"react\";\nimport \"../styles/index.css\"\nimport sunImage from '../images/sun.png';\nimport { Script } from \"gatsby\";\n\nimport SunInfo from \"../components/SunInfo\";\n\nconst sunTimeSection = {\n  position: \"relative\",\n  height: \"100vh\",\n  width: \"100vw\"\n}\n\nconst sunTimeBackground = {\n  background: \"linear-gradient(196.75deg, #FDC830 0%, #F37335 100%)\"\n}\n\nconst sunTime = {\n  position: \"absolute\",\n  bottom: 0,\n  left: 0,\n  padding: \"1em\"\n}\n\nconst sunImageStyles = {\n  position: \"absolute\",\n  top: 0,\n  right: 0,\n  maxWidth: 268,\n  maxHeight: 268\n}\n\nconst additionalInfo = {\n  display: \"grid\",\n  gridGap: \"1em\",\n  gridTemplateColumns: \"repeat(auto-fit, minmax(320px , 1fr))\",\n  margin: \"1em 1em 0 1em\",\n  borderTop: \"1px solid rgba(255, 255, 255, 0.5)\",\n  padding: \"1em 0 2em 0\"\n}\n\n//Sthlm\nconst lat = 59.3293;\nconst long = 18.0686;\n\n// markup\nconst IndexPage = () => {\n  return (\n    <>\n      <div style={sunTimeBackground}>\n        <img src={sunImage} style={sunImageStyles} alt=\"Illustration av solen\" />\n        <main>\n          <title>SoluppgÃ¥ng och solnedgÃ¥ng</title>\n          <section style={sunTimeSection}>\n            <div style={sunTime}>\n              <SunInfo lat={lat} long={long} />\n            </div>\n          </section>\n        </main>\n        <aside style={additionalInfo}>\n          <section>\n            <h3>Om fenomenet solnedgÃ¥ng</h3>\n            <p>SolnedgÃ¥ng Ã¤r det dagliga intrÃ¤ffandet av att solen fÃ¶rsvinner under horisonten pÃ¥ grund av jordens rotation. Tiden fÃ¶r solnedgÃ¥ng, enligt astronomi, rÃ¤knas som nÃ¤r den Ã¶ver kroppen av solen sjunker under horistonen.</p>\n          </section>\n          <section>\n            <h3>Om Stockholm</h3>\n            <p>Stockholm Ã¤r Sveriges huvudstad och etablerades 1187. Idag har stockholms tÃ¤tort Ã¶ver 1,5 miljoner invÃ¥nare. <a href=\"https://miljobarometern.stockholm.se/klimat/klimat-och-vaderstatistik/soltimmar/\">Ãr 2021 hade Stockholm totalt 1961 timmar under hela Ã¥ret</a>.</p>\n          </section>\n        </aside>\n      </div>\n      <Script src=\"https://cdn.counter.dev/script.js\" dataId=\"3fa29685-fc95-48f1-abb3-a74267615874\" dataUtcoffset=\"2\" />\n    </>\n  );\n};\n\nexport default IndexPage;\n"],"names":["DEFAULT_ZENITH","DEGREES_PER_HOUR","MSEC_IN_HOUR","sinDeg","deg","Math","sin","PI","acosDeg","x","acos","cosDeg","cos","mod","a","b","result","calculate","latitude","longitude","isSunrise","zenith","date","dayOfYear","ceil","getTime","Date","getFullYear","getDayOfYear","hoursFromMeridian","approxTimeOfEventInDays","sunMeanAnomaly","sunTrueLongitude","ascension","tan","rightAscension","atan","floor","sinDec","cosDec","asin","cosLocalHourAngle","time","utcMidnight","UTC","getMonth","getDate","exports","arguments","length","undefined","formatTime","Intl","DateTimeFormat","hour","minute","format","SunInfo","props","todaysDate","todaysSunrise","getSunrise","lat","long","todaysSunset","getSunset","todaysSunTime","yesterdaysDate","setDate","yesterdaysSunrise","sunTimeDiffToYesterday","React","minutes","hours","round","timeDiffMilliseconds","timeDiffMinutes","abs","diffToYesterday","sunTimeSection","position","height","width","sunTimeBackground","background","sunTime","bottom","left","padding","sunImageStyles","top","right","maxWidth","maxHeight","additionalInfo","display","gridGap","gridTemplateColumns","margin","borderTop","IndexPage","style","src","sunImage","alt","href","Script","dataId","dataUtcoffset"],"sourceRoot":""}